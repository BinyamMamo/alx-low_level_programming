	
	<iframe src="https://www.googletagmanager.com/ns.html?id=GTM-N4C8MF2" height="0" width="0"
			style="display:none;visibility:hidden">
	
	
	
		
			<button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar-mobile"
				aria-expanded="false">
				Toggle navigation
				
				
				
			
			
				
			
		
		
			
				<a
						href="/planning/me">
						
						My Planning
					
				<li data-container="body" data-placement="right" data-toggle="tooltip" id="sidebar-current-projects-item"
					title="Projects">
						
						Projects
					
				<a
						href="/corrections/to_review">
						
						QA Reviews I can make
					
				<a
						href="/dashboards/my_current_evaluation_quizzes">
						
						Evaluation quizzes
					
				
				<a
						href="/dashboards/my_curriculums">
						
						Curriculums
					
				<li data-container="body" data-placement="right" data-toggle="tooltip" id="sidebar-concepts-item"
					title="Concepts">
						
						Concepts
					
				<li data-container="body" data-placement="right" data-toggle="tooltip" id="sidebar-dashboards-video-rooms"
					title="Conference rooms">
						
						Conference rooms
					
				
						
						Servers
					
				<li data-container="body" data-placement="right" data-toggle="tooltip" id="sidebar-dashboards-my-containers"
					title="Sandboxes">
						
						Sandboxes
					
				
				
						
						Peers
					
				<a
						href="/dashboards/my_captain_log">
						
						Captain&#39;s Logs
					
				
				
					
						
							
								
							
							Slack
						
					
					
						
							
								<div class="inner"
									style="background-image: url('https://s3.amazonaws.com/alx-intranet.hbtn.io/users/photos/000/213/310/thumb/20221108_164920.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=AKIARDDGGGOUSBVO6H7D%2F20230130%2Fus-east-1%2Fs3%2Faws4_request&amp;X-Amz-Date=20230130T085755Z&amp;X-Amz-Expires=600&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=7a013e0b85c8c6da22553b6b0953894c1f20dfa01952c425ac5a20b10b2e81bd')">
								
							
							My Profile
						
					
				
			
		
	
	
		
			
		
		
			
					
					My Planning
				
			<li data-container="body" data-placement="right" data-toggle="tooltip" id="sidebar-current-projects-item"
				title="Projects">
					
					Projects
				
			<a
					href="/corrections/to_review">
					
					QA Reviews I can make
				
			<a
					href="/dashboards/my_current_evaluation_quizzes">
					
					Evaluation quizzes
				
			
			<a
					href="/dashboards/my_curriculums">
					
					Curriculums
				
			<li data-container="body" data-placement="right" data-toggle="tooltip" id="sidebar-concepts-item"
				title="Concepts">
					
					Concepts
				
			<li data-container="body" data-placement="right" data-toggle="tooltip" id="sidebar-dashboards-video-rooms"
				title="Conference rooms">
					
					Conference rooms
				
			
					
					Servers
				
			<li data-container="body" data-placement="right" data-toggle="tooltip" id="sidebar-dashboards-my-containers"
				title="Sandboxes">
					
					Sandboxes
				
			
			
					
					Peers
				
			<a
					href="/dashboards/my_captain_log">
					
					Captain&#39;s Logs
				
			
			
				
					
						
							
						
						Slack
					
				
				
					
						
							<div class="inner"
								style="background-image: url('https://s3.amazonaws.com/alx-intranet.hbtn.io/users/photos/000/213/310/thumb/20221108_164920.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=AKIARDDGGGOUSBVO6H7D%2F20230130%2Fus-east-1%2Fs3%2Faws4_request&amp;X-Amz-Date=20230130T085755Z&amp;X-Amz-Expires=600&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=7a013e0b85c8c6da22553b6b0953894c1f20dfa01952c425ac5a20b10b2e81bd')">
							
						
						My Profile
					
				
			
		
	
	
		
		
		
			
				
					# 0x13. C - More singly linked lists
					<div data-react-class="tags/Tags"
						data-react-props="{&quot;tags&quot;:[{&quot;id&quot;:7,&quot;value&quot;:&quot;C&quot;,&quot;author_id&quot;:null,&quot;created_at&quot;:&quot;2022-06-16T01:59:38.000Z&quot;,&quot;updated_at&quot;:&quot;2022-06-16T01:59:38.000Z&quot;},{&quot;id&quot;:17,&quot;value&quot;:&quot;Algorithm&quot;,&quot;author_id&quot;:null,&quot;created_at&quot;:&quot;2022-06-16T01:59:38.000Z&quot;,&quot;updated_at&quot;:&quot;2022-06-16T01:59:38.000Z&quot;},{&quot;id&quot;:18,&quot;value&quot;:&quot;Data structure&quot;,&quot;author_id&quot;:null,&quot;created_at&quot;:&quot;2022-06-16T01:59:38.000Z&quot;,&quot;updated_at&quot;:&quot;2022-06-16T01:59:38.000Z&quot;}]}"
						data-react-cache-id="tags/Tags-0">
					<div data-react-class="projects/ProjectMetadata"
						data-react-props="{&quot;metadata&quot;:{&quot;author&quot;:&quot;Julien Barbier&quot;,&quot;weight&quot;:1,&quot;correction&quot;:{&quot;released&quot;:false,&quot;auto_correction_available_at&quot;:&quot;2023-01-30T18:00:00.000+03:00&quot;,&quot;requires_auto_correction&quot;:true,&quot;requires_manual_correction&quot;:false},&quot;bpi&quot;:{&quot;current&quot;:true,&quot;started&quot;:false,&quot;in_second_deadline&quot;:false,&quot;starts_at&quot;:&quot;2023-01-30T06:00:00.000+03:00&quot;,&quot;ends_at&quot;:&quot;2023-02-01T06:00:00.000+03:00&quot;,&quot;second_deadline_at&quot;:&quot;2023-02-02T06:00:00.000+03:00&quot;}}}"
						data-react-cache-id="projects/ProjectMetadata-0">
					
					
						
							## Resources
							Read or watch:
							
								Google 
								Youtube 
							
							## Learning Objectives
							At the end of this project, you are expected to be able to <a href="/rltoken/jL0iK5DlEbQK5eIwCNDa-g"
									title="explain to anyone" target="_blank">explain to anyone, without the help of
									Google:
							### General
							
								How to use linked lists
								Start to look for the right source of information without too much help
							
							### Copyright - Plagiarism
							
								You are tasked to come up with solutions for the tasks below yourself to meet with the above
									learning objectives.
								You will not be able to meet the objectives of this or any following project by copying and pasting
									someone else&rsquo;s work. 
								You are not allowed to publish any content of this project.
								Any form of plagiarism is strictly forbidden and will result in removal from the program.
							
							## Requirements
							### General
							
								Allowed editors: ```vi```, ```vim```, ```emacs```
								All your files will be compiled on Ubuntu 20.04 LTS using ```gcc```, using the options
									```-Wall -Werror -Wextra -pedantic -std=gnu89```
								All your files should end with a new line
								A ```README.md``` file, at the root of the folder of the project is mandatory
								Your code should use the ```Betty``` style. It will be checked using <a
										href="https://github.com/holbertonschool/Betty/blob/master/betty-style.pl" title="betty-style.pl"
										target="_blank">betty-style.pl and <a
										href="https://github.com/holbertonschool/Betty/blob/master/betty-doc.pl" title="betty-doc.pl"
										target="_blank">betty-doc.pl
								You are not allowed to use global variables
								No more than 5 functions per file
								The only C standard library functions allowed are ```malloc```, ```free``` and
									```exit```. Any use of functions like ```printf```, ```puts```,
									```calloc```, ```realloc``` etc&hellip; is forbidden
								You are allowed to use <a
										href="https://github.com/holbertonschool/_putchar.c/blob/master/_putchar.c" title="_putchar"
										target="_blank">_putchar
								You don&rsquo;t have to push ```_putchar.c```, we will use our file. If you do it won&rsquo;t
									be taken into account
								In the following examples, the ```main.c``` files are shown as examples. You can use them to
									test your functions, but you don&rsquo;t have to push them to your repo (if you do we won&rsquo;t take
									them into account). We will use our own ```main.c``` files at compilation. Our
									```main.c``` files might be different from the one shown in the examples
								The prototypes of all your functions and the prototype of the function ```_putchar``` should
									be included in your header file called ```lists.h```
								Don&rsquo;t forget to push your header file
								All your header files should be include guarded
							
							## More Info
							Please use this data structure for this project:
							``` c
/**
 * struct listint_s - singly linked list
 * @n: integer
 * @next: points to the next node
 *
 * Description: singly linked list node structure
 * 
 */
typedef struct listint_s
{
    int n;
    struct listint_s *next;
} listint_t;
```
						
					
					## Tasks
					
						
							
							
								### 
									0. Print list
								
								
									
										mandatory
									
								
							
							
								
								
								
								Write a function that prints all the elements of a ```listint_t``` list.
								
									Prototype: ```size_t print_listint(const listint_t *h);```
									Return: the number of nodes
									Format: see example
									You are allowed to use ```printf```
								
								``` c
julien@ubuntu:~/0x13. More singly linked lists$ cat 0-main.c 
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;stdio.h&gt;
#include &quot;lists.h&quot;
/**
 * main - check the code
 * 
 * Return: Always 0.
 */
int main(void)
{
    listint_t *head;
    listint_t *new;
    listint_t hello = {8, NULL};
    size_t n;
    head = &amp;hello;
    new = malloc(sizeof(listint_t));
    if (new == NULL)
    {
        printf(&quot;Error\n&quot;);
        return (1);
    }
    new-&gt;n = 9;
    new-&gt;next = head;
    head = new;
    n = print_listint(head);
    printf(&quot;-&gt; %lu elements\n&quot;, n);
    free(new);
    return (0);
}
julien@ubuntu:~/0x13. More singly linked lists$ gcc -Wall -pedantic -Werror -Wextra -std=gnu89 0-main.c 0-print_listint.c -o a
julien@ubuntu:~/0x13. More singly linked lists$ ./a 
9
8
-&gt; 2 elements
julien@ubuntu:~/0x13. More singly linked lists$ 
```
							
							
								
								
								
									Repo:
									
										GitHub repository: ```alx-low_level_programming```
										Directory: ```0x13-more_singly_linked_lists```
										File: ```0-print_listint.c```
									
								
								
							
							
							
								
									
										
											
											
											
											Done?!
										
										<button class="student-task-done-by btn btn-default btn-sm" data-task-id="992" data-batch-id="59"
											data-toggle="modal" data-target="#task-992-users-done-modal">
											Help
										
										<div class="modal fade users-done-modal" id="task-992-users-done-modal" data-task-id="992"
											data-batch-id="59">
											
												
													
														<span
																aria-hidden="true">&times;
														#### Students who are done with "0. Print list"
													
													
														
														
														
															
															
															
														
														
													
												
											
										
									
									
									
								
							
						
					
					
						
							
							
								### 
									1. List length
								
								
									
										mandatory
									
								
							
							
								
								
								
								Write a function that returns the number of elements in a linked ```listint_t``` list.
								
									Prototype: ```size_t listint_len(const listint_t *h);```
								
								``` c
julien@ubuntu:~/0x13. More singly linked lists$ cat 1-main.c 
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;stdio.h&gt;
#include &quot;lists.h&quot;
/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
    listint_t *head;
    listint_t *new;
    listint_t hello = {8, NULL};
    size_t n;
    head = &amp;hello;
    new = malloc(sizeof(listint_t));
    if (new == NULL)
    {
        printf(&quot;Error\n&quot;);
        return (1);
    }
    new-&gt;n = 9;
    new-&gt;next = head;
    head = new;
    n = listint_len(head);
    printf(&quot;-&gt; %lu elements\n&quot;, n);
    free(new);
    return (0);
}
julien@ubuntu:~/0x13. More singly linked lists$ gcc -Wall -pedantic -Werror -Wextra -std=gnu89 1-main.c 1-listint_len.c -o b
julien@ubuntu:~/0x13. More singly linked lists$ ./b 
-&gt; 2 elements
julien@ubuntu:~/0x13. More singly linked lists$ 
```
							
							
								
								
								
									Repo:
									
										GitHub repository: ```alx-low_level_programming```
										Directory: ```0x13-more_singly_linked_lists```
										File: ```1-listint_len.c```
									
								
								
							
							
							
								
									
										
											
											
											
											Done?!
										
										<button class="student-task-done-by btn btn-default btn-sm" data-task-id="993" data-batch-id="59"
											data-toggle="modal" data-target="#task-993-users-done-modal">
											Help
										
										<div class="modal fade users-done-modal" id="task-993-users-done-modal" data-task-id="993"
											data-batch-id="59">
											
												
													
														<span
																aria-hidden="true">&times;
														#### Students who are done with "1. List length"
													
													
														
														
														
															
															
															
														
														
													
												
											
										
									
									
									
								
							
						
					
					
						
							
							
								### 
									2. Add node
								
								
									
										mandatory
									
								
							
							
								
								
								
								Write a function that adds a new node at the beginning of a ```listint_t``` list.
								
									Prototype: ```listint_t *add_nodeint(listint_t **head, const int n);```
									Return: the address of the new element, or ```NULL``` if it failed
								
								``` c
julien@ubuntu:~/0x13. More singly linked lists$ cat 2-main.c 
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;stdio.h&gt;
#include &quot;lists.h&quot;
/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
    listint_t *head;
    head = NULL;
    add_nodeint(&amp;head, 0);
    add_nodeint(&amp;head, 1);
    add_nodeint(&amp;head, 2);
    add_nodeint(&amp;head, 3);
    add_nodeint(&amp;head, 4);
    add_nodeint(&amp;head, 98);
    add_nodeint(&amp;head, 402);
    add_nodeint(&amp;head, 1024);
    print_listint(head);
    return (0);
}
julien@ubuntu:~/0x13. More singly linked lists$ gcc -Wall -pedantic -Werror -Wextra -std=gnu89 2-main.c 2-add_nodeint.c 0-print_listint.c -o c
julien@ubuntu:~/0x13. More singly linked lists$ ./c 
1024
402
98
4
3
2
1
0
julien@ubuntu:~/0x13. More singly linked lists$ 
```
							
							
								
								
								
									Repo:
									
										GitHub repository: ```alx-low_level_programming```
										Directory: ```0x13-more_singly_linked_lists```
										File: ```2-add_nodeint.c```
									
								
								
							
							
							
								
									
										
											
											
											
											Done?!
										
										<button class="student-task-done-by btn btn-default btn-sm" data-task-id="994" data-batch-id="59"
											data-toggle="modal" data-target="#task-994-users-done-modal">
											Help
										
										<div class="modal fade users-done-modal" id="task-994-users-done-modal" data-task-id="994"
											data-batch-id="59">
											
												
													
														<span
																aria-hidden="true">&times;
														#### Students who are done with "2. Add node"
													
													
														
														
														
															
															
															
														
														
													
												
											
										
									
									
									
								
							
						
					
					
						
							
							
								### 
									3. Add node at the end
								
								
									
										mandatory
									
								
							
							
								
								
								
								Write a function that adds a new node at the end of a ```listint_t``` list.
								
									Prototype: ```listint_t *add_nodeint_end(listint_t **head, const int n);```
									Return: the address of the new element, or ```NULL``` if it failed
								
								``` c
julien@ubuntu:~/0x13. More singly linked lists$ cat 3-main.c 
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;stdio.h&gt;
#include &quot;lists.h&quot;
/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
    listint_t *head;
    head = NULL;
    add_nodeint_end(&amp;head, 0);
    add_nodeint_end(&amp;head, 1);
    add_nodeint_end(&amp;head, 2);
    add_nodeint_end(&amp;head, 3);
    add_nodeint_end(&amp;head, 4);
    add_nodeint_end(&amp;head, 98);
    add_nodeint_end(&amp;head, 402);
    add_nodeint_end(&amp;head, 1024);
    print_listint(head);
    return (0);
}
julien@ubuntu:~/0x13. More singly linked lists$ gcc -Wall -pedantic -Werror -Wextra -std=gnu89 3-main.c 3-add_nodeint_end.c 0-print_listint.c -o d
julien@ubuntu:~/0x13. More singly linked lists$ ./d 
0
1
2
3
4
98
402
1024
julien@ubuntu:~/0x13. More singly linked lists$ 
```
							
							
								
								
								
									Repo:
									
										GitHub repository: ```alx-low_level_programming```
										Directory: ```0x13-more_singly_linked_lists```
										File: ```3-add_nodeint_end.c```
									
								
								
							
							
							
								
									
										
											
											
											
											Done?!
										
										<button class="student-task-done-by btn btn-default btn-sm" data-task-id="995" data-batch-id="59"
											data-toggle="modal" data-target="#task-995-users-done-modal">
											Help
										
										<div class="modal fade users-done-modal" id="task-995-users-done-modal" data-task-id="995"
											data-batch-id="59">
											
												
													
														<span
																aria-hidden="true">&times;
														#### Students who are done with "3. Add node at the end"
													
													
														
														
														
															
															
															
														
														
													
												
											
										
									
									
									
								
							
						
					
					
						
							
							
								### 
									4. Free list
								
								
									
										mandatory
									
								
							
							
								
								
								
								Write a function that frees a ```listint_t``` list.
								
									Prototype: ```void free_listint(listint_t *head);```
								
								``` c
julien@ubuntu:~/0x13. More singly linked lists$ cat 4-main.c 
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;stdio.h&gt;
#include &quot;lists.h&quot;
/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
    listint_t *head;
    head = NULL;
    add_nodeint_end(&amp;head, 0);
    add_nodeint_end(&amp;head, 1);
    add_nodeint_end(&amp;head, 2);
    add_nodeint_end(&amp;head, 3);
    add_nodeint_end(&amp;head, 4);
    add_nodeint_end(&amp;head, 98);
    add_nodeint_end(&amp;head, 402);
    add_nodeint_end(&amp;head, 1024);
    print_listint(head);
    free_listint(head);
    head = NULL;
    return (0);
}
julien@ubuntu:~/0x13. More singly linked lists$ gcc -Wall -pedantic -Werror -Wextra -std=gnu89 4-main.c 3-add_nodeint_end.c 0-print_listint.c 4-free_listint.c -o e
julien@ubuntu:~/0x13. More singly linked lists$ valgrind ./e 
==3643== Memcheck, a memory error detector
==3643== Copyright (C) 2002-2015, and GNU GPL&#39;d, by Julian Seward et al.
==3643== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==3643== Command: ./e
==3643== 
0
1
2
3
4
98
402
1024
==3643== 
==3643== HEAP SUMMARY:
==3643==     in use at exit: 0 bytes in 0 blocks
==3643==   total heap usage: 9 allocs, 9 frees, 1,152 bytes allocated
==3643== 
==3643== All heap blocks were freed -- no leaks are possible
==3643== 
==3643== For counts of detected and suppressed errors, rerun with: -v
==3643== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
julien@ubuntu:~/0x13. More singly linked lists$ 
```
							
							
								
								
								
									Repo:
									
										GitHub repository: ```alx-low_level_programming```
										Directory: ```0x13-more_singly_linked_lists```
										File: ```4-free_listint.c```
									
								
								
							
							
							
								
									
										
											
											
											
											Done?!
										
										<button class="student-task-done-by btn btn-default btn-sm" data-task-id="996" data-batch-id="59"
											data-toggle="modal" data-target="#task-996-users-done-modal">
											Help
										
										<div class="modal fade users-done-modal" id="task-996-users-done-modal" data-task-id="996"
											data-batch-id="59">
											
												
													
														<span
																aria-hidden="true">&times;
														#### Students who are done with "4. Free list"
													
													
														
														
														
															
															
															
														
														
													
												
											
										
									
									
									
								
							
						
					
					
						
							
							
								### 
									5. Free
								
								
									
										mandatory
									
								
							
							
								
								
								
								Write a function that frees a ```listint_t``` list.
								
									Prototype: ```void free_listint2(listint_t **head);```
									The function sets the ```head``` to ```NULL```
								
								``` c
julien@ubuntu:~/0x13. More singly linked lists$ cat 5-main.c 
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;stdio.h&gt;
#include &quot;lists.h&quot;
/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
    listint_t *head;
    head = NULL;
    add_nodeint_end(&amp;head, 0);
    add_nodeint_end(&amp;head, 1);
    add_nodeint_end(&amp;head, 2);
    add_nodeint_end(&amp;head, 3);
    add_nodeint_end(&amp;head, 4);
    add_nodeint_end(&amp;head, 98);
    add_nodeint_end(&amp;head, 402);
    add_nodeint_end(&amp;head, 1024);
    print_listint(head);
    free_listint2(&amp;head);
    printf(&quot;%p\n&quot;, (void *)head);
    return (0);
}
julien@ubuntu:~/0x13. More singly linked lists$ gcc -Wall -pedantic -Werror -Wextra -std=gnu89 5-main.c 3-add_nodeint_end.c 0-print_listint.c 5-free_listint2.c -o f
julien@ubuntu:~/0x13. More singly linked lists$ valgrind ./f 
==3843== Memcheck, a memory error detector
==3843== Copyright (C) 2002-2015, and GNU GPL&#39;d, by Julian Seward et al.
==3843== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==3843== Command: ./f
==3843== 
0
1
2
3
4
98
402
1024
(nil)
==3843== 
==3843== HEAP SUMMARY:
==3843==     in use at exit: 0 bytes in 0 blocks
==3843==   total heap usage: 9 allocs, 9 frees, 1,152 bytes allocated
==3843== 
==3843== All heap blocks were freed -- no leaks are possible
==3843== 
==3843== For counts of detected and suppressed errors, rerun with: -v
==3843== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
julien@ubuntu:~/0x13. More singly linked lists$ 
```
							
							
								
								
								
									Repo:
									
										GitHub repository: ```alx-low_level_programming```
										Directory: ```0x13-more_singly_linked_lists```
										File: ```5-free_listint2.c```
									
								
								
							
							
							
								
									
										
											
											
											
											Done?!
										
										<button class="student-task-done-by btn btn-default btn-sm" data-task-id="997" data-batch-id="59"
											data-toggle="modal" data-target="#task-997-users-done-modal">
											Help
										
										<div class="modal fade users-done-modal" id="task-997-users-done-modal" data-task-id="997"
											data-batch-id="59">
											
												
													
														<span
																aria-hidden="true">&times;
														#### Students who are done with "5. Free"
													
													
														
														
														
															
															
															
														
														
													
												
											
										
									
									
									
								
							
						
					
					
						
							
							
								### 
									6. Pop
								
								
									
										mandatory
									
								
							
							
								
								
								
								Write a function that deletes the head node of a ```listint_t``` linked list, and returns the
									head node&rsquo;s data (n).
								
									Prototype: ```int pop_listint(listint_t **head);```
									if the linked list is empty return ```0```
								
								``` c
julien@ubuntu:~/0x13. More singly linked lists$ cat 6-main.c 
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;stdio.h&gt;
#include &quot;lists.h&quot;
/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
    listint_t *head;
    int n;
    head = NULL;
    add_nodeint_end(&amp;head, 0);
    add_nodeint_end(&amp;head, 1);
    add_nodeint_end(&amp;head, 2);
    add_nodeint_end(&amp;head, 3);
    add_nodeint_end(&amp;head, 4);
    add_nodeint_end(&amp;head, 98);
    add_nodeint_end(&amp;head, 402);
    add_nodeint_end(&amp;head, 1024);
    print_listint(head);
    n = pop_listint(&amp;head);
    printf(&quot;- %d\n&quot;, n);
    print_listint(head);
    n = pop_listint(&amp;head);
    printf(&quot;- %d\n&quot;, n);
    print_listint(head);
    free_listint2(&amp;head);
    printf(&quot;%p\n&quot;, (void *)head);
    return (0);
}
julien@ubuntu:~/0x13. More singly linked lists$ gcc -Wall -pedantic -Werror -Wextra -std=gnu89 6-main.c 3-add_nodeint_end.c 0-print_listint.c 5-free_listint2.c 6-pop_listint.c -o g
julien@ubuntu:~/0x13. More singly linked lists$ valgrind ./g 
==4369== Memcheck, a memory error detector
==4369== Copyright (C) 2002-2015, and GNU GPL&#39;d, by Julian Seward et al.
==4369== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==4369== Command: ./g
==4369== 
0
1
2
3
4
98
402
1024
- 0
1
2
3
4
98
402
1024
- 1
2
3
4
98
402
1024
(nil)
==4369== 
==4369== HEAP SUMMARY:
==4369==     in use at exit: 0 bytes in 0 blocks
==4369==   total heap usage: 9 allocs, 9 frees, 1,152 bytes allocated
==4369== 
==4369== All heap blocks were freed -- no leaks are possible
==4369== 
==4369== For counts of detected and suppressed errors, rerun with: -v
==4369== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
julien@ubuntu:~/0x13. More singly linked lists$ 
```
							
							
								
								
								
									Repo:
									
										GitHub repository: ```alx-low_level_programming```
										Directory: ```0x13-more_singly_linked_lists```
										File: ```6-pop_listint.c```
									
								
								
							
							
							
								
									
										
											
											
											
											Done?!
										
										<button class="student-task-done-by btn btn-default btn-sm" data-task-id="998" data-batch-id="59"
											data-toggle="modal" data-target="#task-998-users-done-modal">
											Help
										
										<div class="modal fade users-done-modal" id="task-998-users-done-modal" data-task-id="998"
											data-batch-id="59">
											
												
													
														<span
																aria-hidden="true">&times;
														#### Students who are done with "6. Pop"
													
													
														
														
														
															
															
															
														
														
													
												
											
										
									
									
									
								
							
						
					
					
						
							
							
								### 
									7. Get node at index
								
								
									
										mandatory
									
								
							
							
								
								
								
								Write a function that returns the nth node of a ```listint_t``` linked list.
								
									Prototype: ```listint_t *get_nodeint_at_index(listint_t *head, unsigned int index);```
									where ```index``` is the index of the node, starting at ```0```
									if the node does not exist, return ```NULL```
								
								``` c
julien@ubuntu:~/0x13. More singly linked lists$ cat 7-main.c 
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;stdio.h&gt;
#include &quot;lists.h&quot;
/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
    listint_t *head;
    listint_t *node;
    head = NULL;
    add_nodeint_end(&amp;head, 0);
    add_nodeint_end(&amp;head, 1);
    add_nodeint_end(&amp;head, 2);
    add_nodeint_end(&amp;head, 3);
    add_nodeint_end(&amp;head, 4);
    add_nodeint_end(&amp;head, 98);
    add_nodeint_end(&amp;head, 402);
    add_nodeint_end(&amp;head, 1024);
    print_listint(head);
    node = get_nodeint_at_index(head, 5);
    printf(&quot;%d\n&quot;, node-&gt;n);
    print_listint(head);
    free_listint2(&amp;head);
    return (0);
}
julien@ubuntu:~/0x13. More singly linked lists$ gcc -Wall -pedantic -Werror -Wextra -std=gnu89 7-main.c 3-add_nodeint_end.c 0-print_listint.c 5-free_listint2.c 7-get_nodeint.c -o h
julien@ubuntu:~/0x13. More singly linked lists$ ./h 
0
1
2
3
4
98
402
1024
98
0
1
2
3
4
98
402
1024
julien@ubuntu:~/0x13. More singly linked lists$ 
```
							
							
								
								
								
									Repo:
									
										GitHub repository: ```alx-low_level_programming```
										Directory: ```0x13-more_singly_linked_lists```
										File: ```7-get_nodeint.c```
									
								
								
							
							
							
								
									
										
											
											
											
											Done?!
										
										<button class="student-task-done-by btn btn-default btn-sm" data-task-id="999" data-batch-id="59"
											data-toggle="modal" data-target="#task-999-users-done-modal">
											Help
										
										<div class="modal fade users-done-modal" id="task-999-users-done-modal" data-task-id="999"
											data-batch-id="59">
											
												
													
														<span
																aria-hidden="true">&times;
														#### Students who are done with "7. Get node at index"
													
													
														
														
														
															
															
															
														
														
													
												
											
										
									
									
									
								
							
						
					
					
						
							
							
								### 
									8. Sum list
								
								
									
										mandatory
									
								
							
							
								
								
								
								Write a function that returns the sum of all the data (n) of a ```listint_t``` linked list.
								
								
									Prototype: ```int sum_listint(listint_t *head);```
									if the list is empty, return ```0```
								
								``` c
julien@ubuntu:~/0x13. More singly linked lists$ cat 8-main.c 
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;stdio.h&gt;
#include &quot;lists.h&quot;
/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
    listint_t *head;
    int sum;
    head = NULL;
    add_nodeint_end(&amp;head, 0);
    add_nodeint_end(&amp;head, 1);
    add_nodeint_end(&amp;head, 2);
    add_nodeint_end(&amp;head, 3);
    add_nodeint_end(&amp;head, 4);
    add_nodeint_end(&amp;head, 98);
    add_nodeint_end(&amp;head, 402);
    add_nodeint_end(&amp;head, 1024);
    sum = sum_listint(head);
    printf(&quot;sum = %d\n&quot;, sum);
    free_listint2(&amp;head);
    return (0);
}
julien@ubuntu:~/c0x13. More singly linked lists$ gcc -Wall -pedantic -Werror -Wextra -std=gnu89 8-main.c 3-add_nodeint_end.c 5-free_listint2.c 8-sum_listint.c -o i
julien@ubuntu:~/0x13. More singly linked lists$ ./i 
sum = 1534
julien@ubuntu:~/0x13. More singly linked lists$ 
```
							
							
								
								
								
									Repo:
									
										GitHub repository: ```alx-low_level_programming```
										Directory: ```0x13-more_singly_linked_lists```
										File: ```8-sum_listint.c```
									
								
								
							
							
							
								
									
										
											
											
											
											Done?!
										
										<button class="student-task-done-by btn btn-default btn-sm" data-task-id="1000" data-batch-id="59"
											data-toggle="modal" data-target="#task-1000-users-done-modal">
											Help
										
										<div class="modal fade users-done-modal" id="task-1000-users-done-modal" data-task-id="1000"
											data-batch-id="59">
											
												
													
														<span
																aria-hidden="true">&times;
														#### Students who are done with "8. Sum list"
													
													
														
														
														
															
															
															
														
														
													
												
											
										
									
									
									
								
							
						
					
					
						
							
							
								### 
									9. Insert
								
								
									
										mandatory
									
								
							
							
								
								
								
								Write a function that inserts a new node at a given position.
								
									Prototype:
										```listint_t *insert_nodeint_at_index(listint_t **head, unsigned int idx, int n);```
									where ```idx``` is the index of the list where the new node should be added. Index starts
										at ```0```
									Returns: the address of the new node, or ```NULL``` if it failed
									if it is not possible to add the new node at index ```idx```, do not add the new node and
										return ```NULL```
								
								``` c
julien@ubuntu:~/0x13. More singly linked lists$ cat 9-main.c 
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;stdio.h&gt;
#include &quot;lists.h&quot;
/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
    listint_t *head;
    head = NULL;
    add_nodeint_end(&amp;head, 0);
    add_nodeint_end(&amp;head, 1);
    add_nodeint_end(&amp;head, 2);
    add_nodeint_end(&amp;head, 3);
    add_nodeint_end(&amp;head, 4);
    add_nodeint_end(&amp;head, 98);
    add_nodeint_end(&amp;head, 402);
    add_nodeint_end(&amp;head, 1024);
    print_listint(head);
    printf(&quot;-----------------\n&quot;);
    insert_nodeint_at_index(&amp;head, 5, 4096);
    print_listint(head);
    free_listint2(&amp;head);
    return (0);
}
julien@ubuntu:~/0x13. More singly linked lists$ gcc -Wall -pedantic -Werror -Wextra -std=gnu89 9-main.c 3-add_nodeint_end.c 0-print_listint.c 5-free_listint2.c 9-insert_nodeint.c -o j
julien@ubuntu:~/0x13. More singly linked lists$ ./j 
0
1
2
3
4
98
402
1024
-----------------
0
1
2
3
4
4096
98
402
1024
julien@ubuntu:~/0x13. More singly linked lists$ 
```
							
							
								
								
								
									Repo:
									
										GitHub repository: ```alx-low_level_programming```
										Directory: ```0x13-more_singly_linked_lists```
										File: ```9-insert_nodeint.c```
									
								
								
							
							
							
								
									
										
											
											
											
											Done?!
										
										<button class="student-task-done-by btn btn-default btn-sm" data-task-id="1001" data-batch-id="59"
											data-toggle="modal" data-target="#task-1001-users-done-modal">
											Help
										
										<div class="modal fade users-done-modal" id="task-1001-users-done-modal" data-task-id="1001"
											data-batch-id="59">
											
												
													
														<span
																aria-hidden="true">&times;
														#### Students who are done with "9. Insert"
													
													
														
														
														
															
															
															
														
														
													
												
											
										
									
									
									
								
							
						
					
					
						
							
							
								### 
									10. Delete at index
								
								
									
										mandatory
									
								
							
							
								
								
								
								Write a function that deletes the node at index ```index``` of a ```listint_t``` linked
									list.
								
									Prototype: ```int delete_nodeint_at_index(listint_t **head, unsigned int index);```
									where ```index``` is the index of the node that should be deleted. Index starts at
										```0```
									Returns: ```1``` if it succeeded, ```-1``` if it failed
								
								``` c
julien@ubuntu:~/0x13. More singly linked lists$ cat 10-main.c 
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;stdio.h&gt;
#include &quot;lists.h&quot;
/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
    listint_t *head;
    head = NULL;
    add_nodeint_end(&amp;head, 0);
    add_nodeint_end(&amp;head, 1);
    add_nodeint_end(&amp;head, 2);
    add_nodeint_end(&amp;head, 3);
    add_nodeint_end(&amp;head, 4);
    add_nodeint_end(&amp;head, 98);
    add_nodeint_end(&amp;head, 402);
    add_nodeint_end(&amp;head, 1024);
    print_listint(head);
    printf(&quot;-----------------\n&quot;);
    delete_nodeint_at_index(&amp;head, 5);
    print_listint(head);
    printf(&quot;-----------------\n&quot;);
    delete_nodeint_at_index(&amp;head, 0);
    print_listint(head);
    printf(&quot;-----------------\n&quot;);
    delete_nodeint_at_index(&amp;head, 0);
    print_listint(head);
    printf(&quot;-----------------\n&quot;);
    delete_nodeint_at_index(&amp;head, 0);
    print_listint(head);
    printf(&quot;-----------------\n&quot;);
    delete_nodeint_at_index(&amp;head, 0);
    print_listint(head);
    printf(&quot;-----------------\n&quot;);
    delete_nodeint_at_index(&amp;head, 0);
    print_listint(head);
    printf(&quot;-----------------\n&quot;);
    delete_nodeint_at_index(&amp;head, 0);
    print_listint(head);
    printf(&quot;-----------------\n&quot;);
    delete_nodeint_at_index(&amp;head, 0);
    printf(&quot;-----------------\n&quot;);
    delete_nodeint_at_index(&amp;head, 0);
    printf(&quot;-----------------\n&quot;);
    delete_nodeint_at_index(&amp;head, 0);
    printf(&quot;-----------------\n&quot;);
    delete_nodeint_at_index(&amp;head, 0);
    printf(&quot;-----------------\n&quot;);
    delete_nodeint_at_index(&amp;head, 0);
    printf(&quot;-----------------\n&quot;);
    delete_nodeint_at_index(&amp;head, 0);
    printf(&quot;-----------------\n&quot;);
    delete_nodeint_at_index(&amp;head, 0);
    printf(&quot;-----------------\n&quot;);
    delete_nodeint_at_index(&amp;head, 0);
    printf(&quot;-----------------\n&quot;);
    delete_nodeint_at_index(&amp;head, 0);
    printf(&quot;-----------------\n&quot;);
    delete_nodeint_at_index(&amp;head, 0);
    print_listint(head);
    return (0);
}
julien@ubuntu:~/0x13. More singly linked lists$ gcc -Wall -pedantic -Werror -Wextra -std=gnu89 10-main.c 3-add_nodeint_end.c 0-print_listint.c 5-free_listint2.c 10-delete_nodeint.c -o k
julien@ubuntu:~/0x13. More singly linked lists$ valgrind ./k 
==5571== Memcheck, a memory error detector
==5571== Copyright (C) 2002-2015, and GNU GPL&#39;d, by Julian Seward et al.
==5571== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==5571== Command: ./k
==5571== 
0
1
2
3
4
98
402
1024
-----------------
0
1
2
3
4
402
1024
-----------------
1
2
3
4
402
1024
-----------------
2
3
4
402
1024
-----------------
3
4
402
1024
-----------------
4
402
1024
-----------------
402
1024
-----------------
1024
-----------------
-----------------
-----------------
-----------------
-----------------
-----------------
-----------------
-----------------
-----------------
-----------------
==5571== 
==5571== HEAP SUMMARY:
==5571==     in use at exit: 0 bytes in 0 blocks
==5571==   total heap usage: 9 allocs, 9 frees, 1,152 bytes allocated
==5571== 
==5571== All heap blocks were freed -- no leaks are possible
==5571== 
==5571== For counts of detected and suppressed errors, rerun with: -v
==5571== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
julien@ubuntu:~/0x13. More singly linked lists$ 
```
							
							
								
								
								
									Repo:
									
										GitHub repository: ```alx-low_level_programming```
										Directory: ```0x13-more_singly_linked_lists```
										File: ```10-delete_nodeint.c```
									
								
								
							
							
							
								
									
										
											
											
											
											Done?!
										
										<button class="student-task-done-by btn btn-default btn-sm" data-task-id="1002" data-batch-id="59"
											data-toggle="modal" data-target="#task-1002-users-done-modal">
											Help
										
										<div class="modal fade users-done-modal" id="task-1002-users-done-modal" data-task-id="1002"
											data-batch-id="59">
											
												
													
														<span
																aria-hidden="true">&times;
														#### Students who are done with "10. Delete at index"
													
													
														
														
														
															
															
															
														
														
													
												
											
										
									
									
									
								
							
						
					
					
					<input id="unlock_optional_btn"
							class="btn btn-primary btn-block"
							data-confirm="Are you sure? Make sure you focused on the mandatory tasks first"
							data-disable-with="Unlocking 4 advanced tasks..."
							data-gtm-custom-event-name="project_unlock_advanced_tasks" type="submit"
							value="Done with the mandatory tasks? Unlock 4 advanced tasks now!" /><input type="hidden"
							name="authenticity_token"
							value="IWXIGQP9XQSvuY1keOCjkHCD3AaPSSTteYfG1ihs-mgsBMjFC489KewThxnh-YXFTzWkmU9Y2A0_Co8XI8VoWQ"
							autocomplete="off" />
					
				
			
		
		Copyright © 2023 ALX, All rights reserved.
	
	<button class="btn btn-primary" id="search-button" data-search-active="false" data-toggle="modal"
		data-target="#search-modal">
		
		
	
	
		
			
				
					
						<input id="search-bar" type="text" name="hbtn-search-bar"
							placeholder="✨Start search by typing in this field✨">
					
				
				
					
						
						
						
					
					
					
				
			
		
	
	<div class="modal fade" id="markdownGuideModal" tabindex="-1" role="dialog" aria-labelledby="markdownGuideModalLabel"
		aria-hidden="true">
		
			
				
					<span
							aria-hidden="true">&times;
					#### Markdown Guide
				
				
					#### Emphasis
					**bold**
*italics*
~~strikethrough~~
					#### Headers
					# Big header
## Medium header
### Small header
#### Tiny header
					#### Lists
					* Generic list item
* Generic list item
* Generic list item
1. Numbered list item
2. Numbered list item
3. Numbered list item
					#### Links
					[Text to display](http://www.example.com)
					#### Quotes
					 This is a quote.
> It can span multiple lines!
					#### Images
					CSS style available: ```width, height, opacity```
					![](http://www.example.com/image.jpg)
![](http://www.example.com/image.jpg | width: 200px)
![](http://www.example.com/image.jpg | height: 124px | width: 80px | opacity: 0.6)
					#### Tables
					| Column 1 | Column 2 | Column 3 |
| -------- | -------- | -------- |
| John     | Doe      | Male     |
| Mary     | Smith    | Female   |
Or without aligning the columns...
| Column 1 | Column 2 | Column 3 |
| -------- | -------- | -------- |
| John | Doe | Male |
| Mary | Smith | Female |
					#### Displaying code
					`var example = "hello!";`
Or spanning multiple lines...
```
var example = "hello!";
alert(example);
```
				
			
		
	
